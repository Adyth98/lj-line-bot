package com.example.demo.Controller;

import com.example.demo.Creator.*;
import com.example.demo.Dao.MainDao;
import com.example.demo.Getter.Getter;
import com.example.demo.Leave.Leave;
import com.example.demo.model.GroupMember;
import com.example.demo.model.Main;
import com.linecorp.bot.client.LineMessagingClient;
import com.linecorp.bot.client.LineMessagingServiceBuilder;
import com.linecorp.bot.model.ReplyMessage;
import com.linecorp.bot.model.event.*;
import com.linecorp.bot.model.event.message.ImageMessageContent;
import com.linecorp.bot.model.event.message.TextMessageContent;
import com.linecorp.bot.model.event.source.GroupSource;
import com.linecorp.bot.model.event.source.RoomSource;
import com.linecorp.bot.model.event.source.Source;
import com.linecorp.bot.model.message.*;
import com.linecorp.bot.model.profile.UserProfileResponse;
import com.linecorp.bot.model.response.BotApiResponse;
import com.linecorp.bot.spring.boot.annotation.EventMapping;
import com.linecorp.bot.spring.boot.annotation.LineMessageHandler;
import me.postaddict.instagram.scraper.Instagram;
import me.postaddict.instagram.scraper.domain.Media;
import okhttp3.OkHttpClient;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import retrofit2.Response;
import javax.imageio.ImageIO;
import javax.net.ssl.SSLException;
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.*;
import java.util.concurrent.ExecutionException;
<<<<<<< HEAD
=======
import java.util.concurrent.Future;
import java.util.concurrent.ThreadLocalRandom;
>>>>>>> 2b5e3c28eac48d7978a796ce4edd20f334127f0b

@LineMessageHandler
public class MainController {

    @Autowired
    private LineMessagingClient lineMessagingClient;

    private static String AccessToken = "u/jyVKXsD5N/OfmNIvEjnI+NffMIhzcFFjIZ3Whm4Gu9/LTL4y7WjWhWehHjYIO+aG6QUKw5991HFzs7i8c1PAZP07r1LIGun6o8X53yZflIk/Th0W8JkY9G/2IpWkL59subrXO5cOQCxJqjemzHvwdB04t89/1O/w1cDnyilFU=";

    private String id_umum, user_id, room_id, group_id;
    private Source source;

    List<Message> messageList = new ArrayList<>();
    TextMessage textMessage;
    StickerMessage stickerMessage;
    ImageMessageContent imageMessageContent;
    StringBuilder sb = new StringBuilder();
    Random random = new Random();

    CarouselTemplate carouselTemplate = new CarouselTemplate();
    Getter getter = new Getter(AccessToken);

    @EventMapping
    public void handleJoinNewGroup(JoinEvent joinEvent) {
        source = joinEvent.getSource();
        stickerMessage = new StickerMessage("1", "2");
        messageList.add(stickerMessage);
        textMessage = new TextMessage("Nuwun yo aku wes entuk join grup iki\n" +
                "Silakan ketik /fitur untuk melihat fitur-fitur yang ada.");
        messageList.add(textMessage);
        KirimPesan(joinEvent.getReplyToken(), messageList);
    }

    @EventMapping
    public void handleNewFollower(FollowEvent followEvent){
        source = followEvent.getSource();
        id_umum = getter.getId(source);
        MainDao.CreateTableData(id_umum);
        stickerMessage = new StickerMessage("1", "2");
        messageList.add(stickerMessage);
        textMessage = new TextMessage("Nuwun yo aku wes di-add dadi friend\n" +
                "Silakan ketik /fitur untuk melihat fitur-fitur yang ada.\n" +
                "Aku di invite ning group yo iso lhoooo");
        messageList.add(textMessage);
        KirimPesan(followEvent.getReplyToken(), messageList);
    }

    @EventMapping
    public void handleText(MessageEvent<TextMessageContent> msg) {
        handleContent(msg.getReplyToken(), msg, msg.getMessage());
    }

    @EventMapping
    public void handleImage(MessageEvent<ImageMessageContent> img){
        group_id = getter.getId(img.getSource());
        if(MainDao.getStatus(group_id)==1){
            imageMessageContent = img.getMessage();
            id_umum = imageMessageContent.getId();
            FaceDetector faceDetector = new FaceDetector();
            textMessage = faceDetector.handleImageContent(id_umum);
            KirimPesan(img.getReplyToken(), textMessage);
            System.out.println("ID MESSAGE IMAGE : " + id_umum);
        }
    }

    @EventMapping
    public void handlePostback(PostbackEvent event){
        source = event.getSource();
        String postback_response = event.getPostbackContent().getData();
        id_umum = getter.getId(source);
        switch (postback_response){
            case "/ADD-TUGAS" : {
                messageList.clear();
                textMessage = new TextMessage("Kirim deskripsi tugas selengkap mungkin (makul, disuruh ngapain, deadline, dikumpul kemana, dll)");
                messageList.add(textMessage);
                textMessage = new TextMessage("Perhatian!\n" +
                        "Kirim deskripsi tugas dengan format /tugas [spasi] [deskripsi]\n" +
                        "Contoh : /tugas progdas bikin kalkulator deadline senin");
                messageList.add(textMessage);
                break;
            }
            case "/SHOW-TUGAS" : {
                messageList.clear();
                List<Main> mainList = MainDao.GetAll(id_umum, "tugas");
                StringBuilder sb = new StringBuilder();
                int nomor=1;
                sb.append("LIST TUGAS\n\n");
                for (Main item: mainList) {
                    sb.append(nomor + ".\n" +
                            "ID : " + item.getId() + "\n" +
                            item.getDeskripsi() + "\n");
                    nomor++;
                }
                if(sb.equals(null))
                    textMessage = new TextMessage("Belum ada list tugas");
                else
                    textMessage = new TextMessage(String.valueOf(sb));
                messageList.add(textMessage);
                break;
            }
            case "/ADD-UJIAN" : {
                messageList.clear();
                textMessage = new TextMessage("Kirim deskripsi ujian selengkap mungkin (makul, sifat ujian, materi apa aja, dll)");
                messageList.add(textMessage);
                textMessage = new TextMessage("Perhatian!\n" +
                        "Kirim deskripsi ujian dengan format /ujian [spasi] [deskripsi]\n" +
                        "Contoh : /ujian progdas open A4 tinta biru");
                messageList.add(textMessage);
                break;
            }
            case "/SHOW-UJIAN" : {
                messageList.clear();
                List<Main> mainList = MainDao.GetAll(id_umum, "ujian");
                StringBuilder sb = new StringBuilder();
                int nomor=1;
                sb.append("LIST UJIAN\n\n");
                for (Main item: mainList) {
                    sb.append(nomor + ".\n" +
                            "ID : " + item.getId() + "\n" +
                            item.getDeskripsi() + "\n");
                    nomor++;
                }
                if(sb.equals(null))
                    textMessage = new TextMessage("Belum ada postback_response tugas");
                else
                    textMessage = new TextMessage(String.valueOf(sb));
                messageList.add(textMessage);
                break;
            }
            case "/HAPUS-TUGAS" : {
                messageList.clear();
                List<Main> mainList = MainDao.GetAll(id_umum, "tugas");
                StringBuilder sb = new StringBuilder();
                int nomor=1;
                for (Main item: mainList) {
                    sb.append(nomor + ".\n" +
                            "ID : " + item.getId() + "\n" +
                            item.getDeskripsi() + "\n");
                    nomor++;
                }
                textMessage = new TextMessage(String.valueOf(sb));
                messageList.add(textMessage);
                textMessage = new TextMessage("Kirim command dengan format /hapus [spasi] [ID]");
                messageList.add(textMessage);
                textMessage = new TextMessage("List ID tugas bisa dilihat di atas");
                messageList.add(textMessage);
                break;
            }
            case "/HAPUS-UJIAN" : {
                messageList.clear();
                List<Main> mainList = MainDao.GetAll(id_umum, "ujian");
                StringBuilder sb = new StringBuilder();
                int nomor=1;
                for (Main item: mainList) {
                    sb.append(nomor + ".\n" +
                            "ID : " + item.getId() + "\n" +
                            item.getDeskripsi() + "\n");
                    nomor++;
                }
                textMessage = new TextMessage(String.valueOf(sb));
                messageList.add(textMessage);
                textMessage = new TextMessage("Kirim command dengan format /hapus [spasi] [ID]");
                messageList.add(textMessage);
                textMessage = new TextMessage("List ID ujian bisa dilihat di atas");
                messageList.add(textMessage);
                break;
            }
            case "/CARA-PAKAI-APAKAH" : {
                messageList.clear();
                textMessage = new TextMessage("Cara Pakai LJ Ajaib v1\n\n" +
                        "Ketikkan command dengan format :\n" +
                        "Apakah .......\n" +
                        "Contoh : Apakah dedy tampan?");
                messageList.add(textMessage);
                break;
            }
            case "/CARA-PAKAI-SIAPAKAH" : {
                messageList.clear();
                textMessage = new TextMessage("Cara Pakai LJ Ajaib v2\n\n" +
                        "Ketikkan command dengan format :\n" +
                        "Siapakah diantara [nama 1] dan [nama 2] yang ......\n" +
                        "Contoh : Siapakah diantara Dedy dan Kepok yang paling tampan?\n" +
                        "ATAU\n" +
                        "Siapakah yang paling ...." +
                        "Contoh : Siapakah yang paling tampan?");
                messageList.add(textMessage);
                break;
            }
            case "/CARA-PAKAI-WAJAH" : {
                messageList.clear();
                textMessage = new TextMessage("Cara Pakai LJ Ajaib v3\n\n" +
                        "Ketikkan command /FACE-DETECT lalu tunggu sampai LJ BOT membalas 'MULAI'.\n" +
                        "Setelah itu, kirimlah foto dengan 1 wajah didalamnya untuk dideteksi oleh LJ BOT.\n\n" +
                        "Jika sudah selesai bermain-main, ketikkan command /STOP");
                messageList.add(textMessage);
                break;
            }
            case "/CARA-PAKAI-CINTA" : {
                messageList.clear();
                textMessage = new TextMessage("Cara Pakai LJ Ajaib v4\n\n" +
                        "Ketikkan command dengan format /love [spasi] [nama1] [spasi] [nama2]\n" +
                        "untuk menghitung kadar cinta mereka.");
                messageList.add(textMessage);
                break;
            }
        }
        KirimPesan(event.getReplyToken(), messageList);
    }

    public void handleContent(String replyToken, Event event, TextMessageContent content){
        String pesan = content.getText().toUpperCase();
        String[] pesan_split = pesan.split(" ");
        int pesan_split_length = pesan_split.length;

        source = event.getSource();
        id_umum = getter.getId(source);
        user_id = event.getSource().getUserId();
        group_id = getter.getId(source);

        MainDao.CreateTableData(id_umum);
        MainDao.CreateTableGroupMember(id_umum);

        List<GroupMember> groupMembers = new ArrayList<>();
        MainDao.InsertGroupMemberId(group_id, user_id);
        groupMembers = MainDao.getAllMemberIds(group_id);

        String command = null;
        if(pesan.equals("/FITUR")){
            command = "/FITUR";
        } else if(pesan.equals("/HIBURAN")){
            command = "/HIBURAN";
        } else if(pesan.equals("/PERKULIAHAN")){
            command = "/PERKULIAHAN";
        } else if(pesan_split[0].equals("/TUGAS")){
            command = "/TUGAS";
        } else if(pesan_split[0].equals("/UJIAN")){
            command = "/UJIAN";
        } else if(pesan_split[0].equals("/HAPUS")){
            if (pesan.substring(7, 12).equals("TUGAS")) {
                command = "/HPT";
            } else if(pesan.substring(7, 12).equals("UJIAN")){
                command = "/HPJ";
            }
        } else if(pesan.equals("/FACE-DETECT")){
            command = "/FACE-DETECT";
        } else if(pesan.equals("/STOP")){
            command = "/STOP";
        } else if(pesan_split[0].equals("SIAPAKAH")){
            command = "/SIAPAKAH";
        } else if(pesan_split[0].equals("APAKAH")){
            command = "/APAKAH";
        } else if(pesan_split[0].equals("/JADWAL-SHOLAT")){
            command = "/JADWAL-SHOLAT";
        } else if(pesan_split[0].equals("/LOVE")){
            command = "/LOVE";
        } else if((pesan.contains("HAI") ||
                pesan.contains("HEI") ||
                pesan.contains("HEY") ||
                pesan.contains("HI")) && pesan.contains("LJ BOT")){
            command = "/HAI";
<<<<<<< HEAD
        } else if(pesan.equals("APAKAH LJ BOT TAKUT SAMA DEDY?")){
            command = "/LEAVE-GROUP";
=======
        } else if((command + "E-DETECT").equals("/FACE-DETECT")){
            command = "/FACE-DETECT";
        } else if((command + "P").equals("/STOP")){
            command = "/FACE-STOP";
        } else if((command + "WAL-SHOLAT").equals("/JADWAL-SHOLAT")){
            command = "/JADWAL-SHOLAT";
        } else if((command + "E").equals("/LOVE")){
            command = "/LOVE";
        } else if((command + "LK").equals("/STALK")) {
            command = "/STALK";
>>>>>>> 2b5e3c28eac48d7978a796ce4edd20f334127f0b
        }

        Source source = event.getSource();
        List<Message> messageList = new ArrayList<>();
        TextMessage textMessage = null;
        id_umum = getter.getId(source);
        TemplateMessage templateMessage = null;
        TugasUjian tugasUjian = new TugasUjian(id_umum);
        switch (command){
            case "/FITUR" :{
                textMessage = new TextMessage(
                        "FITUR-FITUR LJ BOT\n\n" +
                        "1. /PERKULIAHAN\n" +
                        "2. /HIBURAN");
                KirimPesan(replyToken, textMessage);
                break;
            }
            case "/PERKULIAHAN" : {
                com.linecorp.bot.model.message.template.CarouselTemplate carouselTemplate = this.carouselTemplate.templateKuliah();
                templateMessage = new TemplateMessage("LJ BOT mengirim pesan!", carouselTemplate);
                KirimPesan(replyToken, templateMessage);
                break;
            }
            case "/HIBURAN" : {
<<<<<<< HEAD
                com.linecorp.bot.model.message.template.CarouselTemplate carouselTemplate = this.carouselTemplate.templateHiburan();
=======
                CarouselTemplate carouselTemplate = new CarouselTemplate(
                        Arrays.asList(
                                new CarouselColumn(null, "LJ AJAIB v1", "LJ Ajaib Apakah", Arrays.asList(
                                        new PostbackAction("How to LJ Ajaib v1",
                                                "/CARA-PAKAI-APAKAH")
                                )),
                                new CarouselColumn(null, "LJ AJAIB v2", "LJ Ajaib Siapakah", Arrays.asList(
                                        new PostbackAction("How to LJ Ajaib v2",
                                                "/CARA-PAKAI-SIAPAKAH")
                                )),
                                new CarouselColumn(null, "LJ AJAIB v3", "LJ Ajaib Wajah", Arrays.asList(
                                        new PostbackAction("How to LJ Ajaib v3",
                                                "/CARA-PAKAI-WAJAH")
                                )),
                                new CarouselColumn(null, "LJ AJAIB v4", "LJ Ajaib Cinta", Arrays.asList(
                                        new PostbackAction("How to LJ Ajaib v4",
                                                "/CARA-PAKAI-CINTA")
                                )),
                                new CarouselColumn(null, "LJ AJAIB v5", "LJ Ajaib Instagram", Arrays.asList(
                                        new PostbackAction("How to LJ Ajaib v5",
                                                "/CARA-PAKAI-INSTAGRAM")
                                ))
                        ));
>>>>>>> 2b5e3c28eac48d7978a796ce4edd20f334127f0b
                templateMessage = new TemplateMessage("LJ BOT mengirim pesan!", carouselTemplate);
                KirimPesan(replyToken, templateMessage);
                break;
            }
            case "/TUGAS" : {
                for (int i=1; i<pesan_split_length; i++){
                    sb.append(pesan_split[i] + " ");
                }
                String desc = sb.toString();
                int status_insert = tugasUjian.AddTugas(desc);

                if(status_insert==1){
                    textMessage = new TextMessage("Tugas berhasil dicatat.\n" +
                            "CIYEEEEEE tugasnya nambahhhhhh");
                    messageList.add(textMessage);
                } else{
                    textMessage = new TextMessage("Oops! Ada kesalahan sistem, tugas gagal dicatat");
                    messageList.add(textMessage);
                }

                KirimPesan(replyToken, messageList);
                break;
            }
            case "/UJIAN" : {
                for (int i=1; i<pesan_split_length; i++){
                    sb.append(pesan_split[i] + " ");
                }
                String desc = sb.toString();
                int status_insert = tugasUjian.AddUjian(desc);
                if(status_insert==1){
                    textMessage = new TextMessage("Ujian berhasil dicatat.");
                    messageList.add(textMessage);
                } else{
                    textMessage = new TextMessage("Oops! Ada kesalahan sistem, ujian gagal dicatat");
                    messageList.add(textMessage);
                }

                KirimPesan(replyToken, messageList);
                break;
            }
            case "/HPT" : {
                String id_delete = pesan_split[1];
                int status_delete = MainDao.DeleteItem(id_umum, id_delete);

                if(status_delete==1){
                    textMessage = new TextMessage("Berhasil delete tugas ID : " + id_delete);
                    messageList.add(textMessage);
                }
                else{
                    textMessage = new TextMessage("Oops! Gagal delete tugas ID : " + id_delete);
                    messageList.add(textMessage);
                }

                KirimPesan(replyToken, messageList);
                break;
            }
            case "/HPJ" : {
                String id_delete = pesan_split[1];
                int status_delete = MainDao.DeleteItem(id_umum, id_delete);

                if(status_delete==1){
                    textMessage = new TextMessage("Berhasil delete ujian ID : " + id_delete);
                    messageList.add(textMessage);
                }
                else{
                    textMessage = new TextMessage("Oops! Gagal delete ujian ID : " + id_delete);
                    messageList.add(textMessage);
                }

                KirimPesan(replyToken, messageList);
                break;
            }
            case "/APAKAH" : {
                int randInt = random.nextInt(10);
                    if(randInt%2==0){
                        textMessage = new TextMessage("Nggak");
                        messageList.add(textMessage);
                    }
                    else if(randInt%2!=0){
                        textMessage = new TextMessage("Ya");
                        messageList.add(textMessage);
                    }
                    KirimPesan(replyToken, messageList);
                break;
            }
            case "/SIAPAKAH" : {
                List<GroupMember> groupMemberList = new ArrayList<>();
                if(pesan_split[1].equals("YANG")){ //jika teks yang diinputkan pengguna adalah siapakah yang paling ......
                    groupMemberList = MainDao.getAllMemberIds(group_id);
                    int banyakMember=groupMemberList.size();
                    int randInt = (int) (Math.random() * ((banyakMember-1)-0));

                    for (int i=1; i<pesan_split.length-1; i++){
                        sb.append(pesan_split[i] + " "); //Men-generate kalimat yang paling .......
                    }
                    String kataTerakhirTanpaTanya = GenerateKalimatYang(pesan, pesan_split);

                    String senderId = event.getSource().getSenderId();
                    String type  = getter.getType(source);
                    GroupMember user_id_beruntung = groupMemberList.get(randInt);

                    String user_name_beruntung = getter.getGroupMemberName(type, senderId, user_id_beruntung.getUserId());

                    textMessage = new TextMessage(user_name_beruntung + " " + String.valueOf(sb).toLowerCase() + String.valueOf(kataTerakhirTanpaTanya).toLowerCase());
                    KirimPesan(replyToken, textMessage);
                } else{
                    StringBuilder nama1 = new StringBuilder();
                    StringBuilder nama2 = new StringBuilder();

                    int indexDan = 0, indexYang = 0;
                    for(int i=0;i<pesan_split.length; i++){
                        if (pesan_split[i].equals("DAN"))
                            indexDan=i;
                        if(pesan_split[i].equals("YANG"))
                            indexYang=i;
                    }
                    System.out.println("index dan : " + indexDan + " index yang : " + indexYang);
                    //SIAPAKAH ANTARA
                    if(pesan_split[1].equals("ANTARA")){
                        for(int i=2; i<indexDan;i++){
                            nama1.append(pesan_split[i] + " ");
                        }
                        for(int i=indexDan+1; i<indexYang;i++){
                            nama2.append(pesan_split[i] + " ");
                        }
                    }
                    //SIAPAKAH DI ANTARA
                    if (pesan_split[2].equals("ANTARA")){
                        for(int i=3; i<indexDan;i++){
                            nama1.append(pesan_split[i] + " ");
                        }
                        for(int i=indexDan+1; i<indexYang;i++){
                            nama2.append(pesan_split[i] + " ");
                        }
                    }
                    //SIAPAKAH DIANTARA
                    if(pesan_split[1].equals("DIANTARA")){
                        for(int i=2; i<indexDan;i++){
                            nama1.append(pesan_split[i] + " ");
                        }
                        for(int i=indexDan+1; i<indexYang;i++){
                            nama2.append(pesan_split[i] + " ");
                        }
                    }
                    String kataTerakhirTanpaTanya = GenerateKalimatYang(pesan, pesan_split);
                    StringBuilder yangPaling = new StringBuilder();
                    for (int i=indexYang; i<pesan_split.length-1; i++){
                        yangPaling.append(pesan_split[i] + " "); //menggabungkan kata-kata yang dipisah-pusah tadi (yang ... ... ... dst)
                    }
                    int randInt = random.nextInt(10);
                    if(randInt%2==0){
                        textMessage = new TextMessage(String.valueOf(nama1) + yangPaling + kataTerakhirTanpaTanya);
                    } else if (randInt%2!=0){
                        textMessage = new TextMessage(String.valueOf(nama2) + yangPaling + kataTerakhirTanpaTanya);
                    }
                    KirimPesan(replyToken, textMessage);
                }
                break;
            }
            case "/HAI" : {
                textMessage = new TextMessage("Hai hai " + getter.getName(user_id));
                KirimPesan(replyToken, textMessage);
                break;
            }
            case "/LEAVE-GROUP" : {
                textMessage = new TextMessage("Wah kabur kalo ada dedy kepok~");
                KirimPesan(replyToken, textMessage);
                String type = getter.getType(source);
                Leave leave = new Leave(AccessToken);
                if (type.equals("group")){
                    leave.LeaveGroup(id_umum);
                } else if(type.equals("room")){
                    leave.LeaveRoom(id_umum);
                }
                break;
            }
            case "/FACE-DETECT" : {
                MainDao.CreateTableImageDetectStatus(group_id);
                MainDao.UpdateImgStatus(group_id, 1);
                textMessage = new TextMessage("MULAI");
                KirimPesan(replyToken, textMessage);
                break;
            }
            case "/FACE-STOP" : {
                MainDao.UpdateImgStatus(group_id, 0);
                textMessage = new TextMessage("Face detection sudah dihentikan");
                KirimPesan(replyToken, textMessage);
                break;
            }
            case "/JADWAL-SHOLAT" : {
                String lokasi = pesan_split[1];
                System.out.println("Lokasi : " + lokasi);
                try {
//                    jadwalSholat(replyToken, lokasi);
                    JadwalSholat jadwalSholat = new JadwalSholat();
                    textMessage = jadwalSholat.jadwalSholat(lokasi);
                    KirimPesan(replyToken, textMessage);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
            }
            case "/LOVE" : {
                if(pesan_split.length<3){
                    textMessage = new TextMessage("Harus ada 2 nama yaaaa");
                    KirimPesan(replyToken, textMessage);
                } else if(pesan_split.length>3){
                    textMessage = new TextMessage("Hayoooo, gak boleh ada orang ketiga atau lebih. Maksimal 2 orang aja ya");
                    KirimPesan(replyToken, textMessage);
                } else{
                    String nama1 = pesan_split[1];
                    String nama2 = pesan_split[2];
                    LoveCalculator loveCalculator = new LoveCalculator();
                    textMessage = loveCalculator.LoveCalculator(nama1, nama2);
                    KirimPesan(replyToken, textMessage);
                }
                break;
            }
            case "/STALK" : {
                String[] kata = pesan.split(" ");
                String username = kata[1];
                System.out.println("Username : " + username);
                try {
                    getInstaPhoto(replyToken, username);
                } catch (Exception e) {
                    e.printStackTrace();
                    KirimPesan(replyToken, new TextMessage("Username tidak tersedia atau di private"));
                }
                break;
            }
        }
    }

    private String GenerateKalimatYang(String pesan, String[] pesan_split){
        char[] kataTerakhir;
        StringBuilder kataTerakhirTanpaTanya = new StringBuilder();
        if(pesan.contains("?")){
            kataTerakhir = String.valueOf(pesan_split[pesan_split.length-1]).toCharArray(); //kata terakhir dipecah-pecah jadi perhuruf
            for (int i=0;i<kataTerakhir.length-1; i++){
                kataTerakhirTanpaTanya.append(kataTerakhir[i]); //menggabungkan huruf2 yang dipecah tadi jadi satu tapi minus tanda tanya
            }
        } else{
            kataTerakhirTanpaTanya.append(pesan_split[pesan_split.length-1]);
        }
        return kataTerakhirTanpaTanya.toString();
    }

    public void KirimPesan(String replyToken, List<Message> messages) {
        try {
            BotApiResponse apiResponse = lineMessagingClient
                    .replyMessage(new ReplyMessage(replyToken, messages))
                    .get();
        } catch (InterruptedException | ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    private void KirimPesan(String replyToken, Message message) {
        KirimPesan(replyToken, Collections.singletonList(message));
    }

<<<<<<< HEAD
=======
    public void LoveCalculator(String replyToken, String name1, String name2){
        String concat = String.valueOf(name1).concat(String.valueOf(name2)).toUpperCase();
        int sum = 0;
        for (int i = 0; i < concat.length(); i++) {
            char character = concat.charAt(i);
            int ascii = (int) character;
            sum += ascii;
        }
        double loveRate = sum%100;
        String kataKata=null;
        if (loveRate>=0 && loveRate <=10)
            kataKata = name1 + " dan " + name2 + " sepertinya kurang cocok ya, mending cari yang lain aja..";
        else if(loveRate>10 && loveRate<=20)
            kataKata = name1 + " dan " + name2 + ", cinta kalian kurang kuat, butuh perbaikan lagi untuk dapat menjadi cinta yang sejati..";
        else if(loveRate>20 && loveRate<=30)
            kataKata = name1 + " dan " + name2 + " memiliki potensi untuk menjadi pasangan sejati, namun masih butuh usaha lebih untuk mencapai itu..";
        else if (loveRate>30 && loveRate<=40)
            kataKata = name1 + " dan " + name2 + " jangan menyerah, ada banyak cara untuk menumbuhkan kembali rasa cinta kalian..";
        else if(loveRate>40 && loveRate<=50)
            kataKata = name1 + " dan " + name2 + ", cinta kalian ada di batas antara cinta dan tidak cinta. Kalian perlu melakukan hal yang dulu sering kalian lakukan untuk menumbuhkan cinta kalian kembali..";
        else if(loveRate>50 && loveRate<=60)
            kataKata = name1 + " dan " + name2 + ", hubungan kalian masih bisa dibilang aman, namun hati-hati, bisa jadi ada orang ketiga yang dapat merusak semuanya..";
        else if(loveRate>60 && loveRate<=70)
            kataKata = name1 + " dan " + name2 + " memiliki kadar cinta yang terbilang besar, tetap pertahankan hal itu, maka kalian dapat menjadi pasangan sejati kelak..";
        else if(loveRate>70 && loveRate<=80)
            kataKata = name1 + " dan " + name2 + " memiliki hubungan yang teramat sangat mesra, membuat pasangan-pasangan lain iri pada kalian..";
        else if(loveRate>80 && loveRate<=90)
            kataKata = name1 + " dan " + name2 + " mencintai satu sama lain sepenuh hati, hampir tidak mungkin untuk mengganggu hubungan mereka berdua..";
        else if(loveRate>90 && loveRate<=100)
            kataKata = name1 + " dan " + name2 + ", kalian adalah arti sesungguhnya dari CINTA SEJATI. Tidak ada hal di dunia ini yang mampu memisahkan kalian.";
        TextMessage textMessage = new TextMessage("Kadar cinta : " + loveRate + "%\n" +
                kataKata);
        KirimPesan(replyToken, textMessage);
    }

    @EventMapping
    public void handlePostback(PostbackEvent event){
        Source source = event.getSource();
        List<Message> messageList = new ArrayList<>();
        String data = event.getPostbackContent().getData();
        TextMessage textMessage = null;
        String id = getId(source);
        System.out.println("Postback Event : " + data);
        if(data.equals("/ADD-TUGAS")){
            messageList.clear();
            textMessage = new TextMessage("Kirim deskripsi tugas selengkap mungkin (makul, disuruh ngapain, deadline, dikumpul kemana, dll)");
            messageList.add(textMessage);
            textMessage = new TextMessage("Perhatian!\n" +
                    "Kirim deskripsi tugas dengan format /tugas [spasi] [deskripsi]\n" +
                    "Contoh : /tugas progdas bikin kalkulator deadline senin");
            messageList.add(textMessage);
        } else if(data.equals("/SHOW-TUGAS")){
            messageList.clear();
            List<Main> mainList = MainDao.GetAll(id, "tugas");
            StringBuilder sb = new StringBuilder();
            int nomor=1;
            for (Main item: mainList) {
                sb.append("LIST TUGAS\n\n" +
                        nomor + ".\n" +
                        "ID : " + item.getId() + "\n" +
                        item.getDeskripsi() + "\n");
                nomor++;
            }
            System.out.println("Data get all : " + String.valueOf(sb));
            if(sb.equals(null))
                textMessage = new TextMessage("Belum ada data tugas");
            else
                textMessage = new TextMessage(String.valueOf(sb));
            messageList.add(textMessage);
        } else if (data.equals("/ADD-UJIAN")){
            messageList.clear();
            textMessage = new TextMessage("Kirim deskripsi ujian selengkap mungkin (makul, sifat ujian, materi apa aja, dll)");
            messageList.add(textMessage);
            textMessage = new TextMessage("Perhatian!\n" +
                    "Kirim deskripsi ujian dengan format /ujian [spasi] [deskripsi]\n" +
                    "Contoh : /ujian progdas open A4 tinta biru");
            messageList.add(textMessage);
        } else if (data.equals("/SHOW-UJIAN")){
            messageList.clear();
            List<Main> mainList = MainDao.GetAll(id, "ujian");
            StringBuilder sb = new StringBuilder();
            int nomor=1;
            for (Main item: mainList) {
                sb.append("LIST UJIAN\n\n" +
                        nomor + ".\n" +
                        "ID : " + item.getId() + "\n" +
                        item.getDeskripsi() + "\n");
                nomor++;
            }
            System.out.println("Data get all : " + String.valueOf(sb));
            if(sb.equals(null))
                textMessage = new TextMessage("Belum ada data tugas");
            else
                textMessage = new TextMessage(String.valueOf(sb));
            messageList.add(textMessage);
        } else if (data.equals("/HAPUS-TUGAS")){
            messageList.clear();
            List<Main> mainList = MainDao.GetAll(id, "tugas");
            StringBuilder sb = new StringBuilder();
            int nomor=1;
            for (Main item: mainList) {
                sb.append(nomor + ".\n" +
                        "ID : " + item.getId() + "\n" +
                        item.getDeskripsi() + "\n");
                nomor++;
            }
            textMessage = new TextMessage(String.valueOf(sb));
            messageList.add(textMessage);
            textMessage = new TextMessage("Kirim command dengan format /hapus [spasi] [ID]");
            messageList.add(textMessage);
            textMessage = new TextMessage("List ID tugas bisa dilihat di atas");
            messageList.add(textMessage);
        } else if(data.equals("/HAPUS-UJIAN")){
            messageList.clear();
            List<Main> mainList = MainDao.GetAll(id, "ujian");
            StringBuilder sb = new StringBuilder();
            int nomor=1;
            for (Main item: mainList) {
                sb.append(nomor + ".\n" +
                        "ID : " + item.getId() + "\n" +
                        item.getDeskripsi() + "\n");
                nomor++;
            }
            textMessage = new TextMessage(String.valueOf(sb));
            messageList.add(textMessage);
            textMessage = new TextMessage("Kirim command dengan format /hapus [spasi] [ID]");
            messageList.add(textMessage);
            textMessage = new TextMessage("List ID ujian bisa dilihat di atas");
            messageList.add(textMessage);
        } else if(data.equals("/CARA-PAKAI-APAKAH")){
            messageList.clear();
            textMessage = new TextMessage("Cara Pakai LJ Ajaib v1\n\n" +
                    "Ketikkan command dengan format :\n" +
                    "Apakah .......\n" +
                    "Contoh : Apakah dedy tampan?");
            messageList.add(textMessage);
        } else if(data.equals("/CARA-PAKAI-SIAPAKAH")){
            messageList.clear();
            textMessage = new TextMessage("Cara Pakai LJ Ajaib v2\n\n" +
                    "Ketikkan command dengan format :\n" +
                    "Siapakah diantara [nama 1] dan [nama 2] yang ......\n" +
                    "Contoh : Siapakah diantara Dedy dan Kepok yang paling tampan?");
            messageList.add(textMessage);
        } else if(data.equals("/CARA-PAKAI-WAJAH")){
            messageList.clear();
            textMessage = new TextMessage("Cara Pakai LJ Ajaib v3\n\n" +
                    "Ketikkan command /FACE-DETECT lalu tunggu sampai LJ BOT membalas 'MULAI'.\n" +
                    "Setelah itu, kirimlah foto dengan 1 wajah didalamnya untuk dideteksi oleh LJ BOT.\n\n" +
                    "Jika sudah selesai bermain-main, ketikkan command /STOP");
            messageList.add(textMessage);
        } else if(data.equals("/CARA-PAKAI-CINTA")){
            messageList.clear();
            textMessage = new TextMessage("Cara Pakai LJ Ajaib v4\n\n" +
                    "Ketikkan command dengan format /love [spasi] [nama1] [spasi] [nama2]\n" +
                    "untuk menghitung kadar cinta mereka.");
            messageList.add(textMessage);
        } else if(data.equals("/CARA-PAKAI-INSTAGRAM")){
            messageList.clear();
            textMessage = new TextMessage("CaraPakai LJ Ajaib v5\n\n" +
                    "Ketikkan command dengan format /stalk [spasi] [username instagram]\n" +
                    "Maka akan dibalas dengan foto yang dimiliki oleh akun instagram tersebut");
            messageList.add(textMessage);
        }
        KirimPesan(event.getReplyToken(), messageList);
    }

    public String getId(Source source){
        String id=null;
        String type=null;
        if (source instanceof GroupSource) {
            id = ((GroupSource) source).getGroupId();
            type="group";
        } else if (source instanceof RoomSource) {
            id = ((RoomSource) source).getRoomId();
            type="room";
        } else{
            id = source.getUserId();
            type="personal";
        }
        return id;
    }

    public String getType(Source source){
        String type = null;
        if (source instanceof GroupSource)
            type="group";
        else if(source instanceof RoomSource)
            type="room";
        else
            type="personal";
        return type;
    }

    public List<String> GetMembers(String type, String groupId){
        List<String> memberIds = new ArrayList<>();
        try {
            retrofit2.Response<MembersIdsResponse> response = LineMessagingServiceBuilder
                    .create(AccessToken)
                    .build()
                    .getMembersIds(type, groupId, null)
                    .execute();
            MembersIdsResponse idsResponse = response.body();
            memberIds = idsResponse.getMemberIds();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return memberIds;
    }

    public String getGroupMemberName(String type, String senderId, String userId){
        String userName = "";
        try{
            Response<UserProfileResponse> response =
                    LineMessagingServiceBuilder
                    .create(AccessToken)
                    .build()
                    .getMemberProfile(type, senderId, userId)
                    .execute();
            if (response.isSuccessful()){
                UserProfileResponse profileResponse = response.body();
                userName = profileResponse.getDisplayName();
            } else{
                System.out.println(response.code() + " " + response.message());
            }
        } catch (Exception ex){
            System.out.println("Gagal get Group Member Name : " + ex.toString());
        }
        return userName;
    }

    public void StartGame(String replyToken){
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        AsyncClass asyncClass = context.getBean(AsyncClass.class);
        Future future = asyncClass.gameMulai();
        status_waiting_game=1;
        String pengumuman = null;
        try {
            pengumuman = future.get().toString();
        } catch (Exception e) {
            System.out.println("Gagal asyncClass : " + e.toString());
            e.printStackTrace();
        }
        System.out.println("UPDATE : " + pengumuman);
        TextMessage textMessage = new TextMessage("GAME DIMULAI!");
        KirimPesan(replyToken, textMessage);
    }

    public String getName(String userId){
        String name = "";
        try {
            Response<UserProfileResponse> response =
                    LineMessagingServiceBuilder
                    .create(AccessToken)
                    .build()
                    .getProfile(userId)
                    .execute();
            if (response.isSuccessful()){
                UserProfileResponse profileResponse = response.body();
                name = profileResponse.getDisplayName();
            } else{
                System.out.println(response.code() + " " + response.message());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return name;
    }

    private void getInstaPhoto(String replyToken, String username) throws IOException {
        Instagram instagram = new Instagram(new OkHttpClient());
        List<Media> media = instagram.getMedias(username, 10);
        int randInt = ThreadLocalRandom.current().nextInt(0, 10+1);
        ImageMessage message = new ImageMessage(media.get(randInt).imageUrls.high,
                media.get(randInt).imageUrls.thumbnail);
        String urlMedia = media.get(randInt).link;
        KirimPesan(replyToken, message);
        KirimPesan(replyToken, new TextMessage(urlMedia));
    }

//    public String getName2(String userId){
//        final String[] name = new String[1];
//        lineMessagingClient
//                .getProfile(userId)
//                .whenComplete(((userProfileResponse, throwable) -> {
//                    if(throwable!=null){
//                        name[0] = userProfileResponse.getDisplayName();
//                    }
//                }));
//        return name[0];
//    }
>>>>>>> 2b5e3c28eac48d7978a796ce4edd20f334127f0b
}
